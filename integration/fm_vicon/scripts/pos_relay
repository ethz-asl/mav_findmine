#!/usr/bin/env python
# -*- coding: utf-8 -*-

# MIT License
#
# Copyright (c) 2020 Rik Baehnemann, ASL, ETH Zurich, Switzerland
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import rospy
import numpy as np

import tf2_ros
import geometry_msgs.msg
import piksi_rtk_msgs.msg

if __name__ == '__main__':
    rospy.init_node('tf2_pos_relay')

    tf_buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tf_buffer)
    pos_cov_pub = rospy.Publisher('/moa/piksi/position_receiver_0/ros/pos_enu_cov', piksi_rtk_msgs.msg.PositionWithCovarianceStamped, queue_size=1)
    pos_pub = rospy.Publisher('/moa/piksi/position_receiver_0/ros/pos_enu', geometry_msgs.msg.PointStamped, queue_size=1)
    rate = 10
    poll_rate = rospy.Rate(20)
    delay = rospy.get_param('~vicon_delay_s', 0.0)
    vicon_delay_s = rospy.Duration(delay)
    rospy.loginfo("Configured Vicon delay: %.6f s", (delay))
    startup_sec = 4
    stamp = rospy.Time().now()
    stamp.secs = stamp.secs + startup_sec
    stamp.nsecs = 0

    while not rospy.is_shutdown():
        if (rospy.Time().now() > stamp):
            frame_id = 'vicon'
            try:
                T_IP = tf_buffer.lookup_transform(frame_id, 'pos', stamp - vicon_delay_s)
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
                poll_rate.sleep()
                continue

            msg_cov = piksi_rtk_msgs.msg.PositionWithCovarianceStamped()
            msg_cov.header.stamp = stamp
            msg_cov.header.frame_id = frame_id
            msg_cov.position.position = geometry_msgs.msg.Point(T_IP.transform.translation.x, T_IP.transform.translation.y, T_IP.transform.translation.z)
            # Values taken from rosbag
            msg_cov.position.covariance[0] =  0.000097
            msg_cov.position.covariance[1] = -0.000007
            msg_cov.position.covariance[2] = -0.000072
            msg_cov.position.covariance[3] = -0.000007
            msg_cov.position.covariance[4] =  0.000147
            msg_cov.position.covariance[5] =  0.000001
            msg_cov.position.covariance[6] = -0.000072
            msg_cov.position.covariance[7] =  0.000001
            msg_cov.position.covariance[8] =  0.000653
            pos_cov_pub.publish(msg_cov)

            msg = geometry_msgs.msg.PointStamped()
            msg.header = msg_cov.header
            msg.point = msg_cov.position.position
            pos_pub.publish(msg)

            stamp = stamp + rospy.Duration(0, 1e9 / rate)

        poll_rate.sleep()
